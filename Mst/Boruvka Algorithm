        #include <bits/stdc++.h>
        #define int long long
        using namespace std;
        const int N=1e5+5;
        int par[N];
        struct edge{
            int a;int b;int cost;
        };
        void init_dsu(int n){
            for(int i=1;i<=n;i++){
                par[i]=i;
            }
        }
        int getpar(int n){
            if(n==par[n]){
                return n;
            }
            return par[n]=getpar(par[n]);
        }
        void unite(int a,int b){
            a=getpar(a);b=getpar(b);
            if(a!=b){
                par[b]=a;
            }
        }
        edge edges[N];
        int min_edge[N];//tracks the index of the edge who has the smallest edges linked to a component
        int32_t main(){
        ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(0);
        int x;cin>>x;//number of nodes
        int y;cin>>y;//number of edges
        for(int i=0;i<y;i++){
            cin>>edges[i].a>>edges[i].b>>edges[i].cost;
        }
        init_dsu(x);
        int ans=0;
        int number_of_components=x;
        while(number_of_components>1){//the while loop iterates at most log(number of edges times)
            for(int i=0;i<x;i++){
                min_edge[i]=-1;
            }
            for(int i=0;i<y;i++){
                if(getpar(edges[i].a)==getpar(edges[i].b)){
                    continue;
                }
                int r_a=getpar(edges[i].a);
                if(min_edge[r_a]==-1||edges[i].cost<edges[min_edge[r_a]].cost){
                    min_edge[r_a]=i;
                }
                int r_b=getpar(edges[i].b);
                 if(min_edge[r_b]==-1||edges[i].cost<edges[min_edge[r_b]].cost){
                    min_edge[r_b]=i;
                }
             }
            for(int i=1;i<=x;i++){
                if(min_edge[i]!=-1){
                    if(getpar(edges[min_edge[i]].a)!=getpar(edges[min_edge[i]].b)){
                        unite(edges[min_edge[i]].a,edges[min_edge[i]].b);
                        ans+=edges[min_edge[i]].cost;
                        number_of_components--;
                    }
                }
            }
        }
        cout<<ans<<endl;
        return 0;
        }
